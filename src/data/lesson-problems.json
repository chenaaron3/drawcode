[
  {
    "id": "hello-world",
    "title": "Hello World",
    "description": "Run your first program",
    "template": "print('Hello World')\n",
    "solution": "print('Hello World')\n",
    "entrypoint": "",
    "inputs": {},
    "time": 1,
    "mode": "line"
  },
  {
    "id": "quest-notes",
    "title": "Comments",
    "description": "Write comments that document your code",
    "template": "# My first quest will be to:\n\nprint('Are you ready to begin our journey?')\n",
    "solution": "# My first quest will be to:\n# Conquer the world!\nprint('Are you ready to begin our journey?')\n",
    "entrypoint": "",
    "inputs": {},
    "time": 2,
    "mode": "line"
  },
  {
    "id": "numbers",
    "title": "Numbers",
    "description": "Store numerical data in variables",
    "template": "health = 100\ndamage = 25.5\nprint('Health:', health)\nprint('Damage:', damage)\n",
    "solution": "health = 100\ndamage = 25.5\nprint('Health:', health)\nprint('Damage:', damage)\nprint(health - damage)",
    "entrypoint": "",
    "inputs": {},
    "time": 3,
    "mode": "step"
  },
  {
    "id": "strings",
    "title": "Strings",
    "description": "Create and use strings",
    "template": "# Create the two variables below:\n",
    "solution": "# Create the two variables below:\ncharacter_class = \"Warrior\"\nquest_name = 'The Ancient Temple'\n",
    "entrypoint": "",
    "inputs": {},
    "time": 3
  },
  {
    "id": "boolean-introduction",
    "title": "Boolean",
    "description": "Learn to use boolean variables",
    "template": "# Create a boolean variable below \n",
    "solution": "is_warrior = True\nis_mage = False\n",
    "entrypoint": "",
    "inputs": {},
    "time": 2,
    "mode": "line"
  },
  {
    "id": "empty-variables",
    "title": "Empty Variables",
    "description": "Understanding None in Python",
    "template": "# Set the name of the character to None\nname = 'Xaden'\n",
    "solution": "name = None # The character's name has not been entered yet\n",
    "entrypoint": "",
    "inputs": {},
    "time": 3,
    "mode": "line"
  },
  {
    "id": "initialize-variables",
    "title": "Variables Recap",
    "description": "Set up character attributes",
    "template": "# Initialize your character's attributes here\n\n# Don't change the lines below\nprint(f'Level = {level}')\nprint(f'Strength = {strength}')\nprint(f'role = {role}')\n",
    "solution": "# Initialize your character's attributes here\nlevel = 5\nstrength = 42.1\nrole = 'Warrior'\n\n# Don't change the lines below\nprint(f'Level = {level}')\nprint(f'Strength = {strength}')\nprint(f'role = {role}')\n",
    "entrypoint": "",
    "inputs": {},
    "time": 3,
    "mode": "line"
  },
  {
    "id": "changing-numbers",
    "title": "Changing Numbers",
    "description": "Change the value of a variable",
    "template": "# Enter your code here\n",
    "solution": "# First we create the variables\nquilt_width = 8\nquilt_length = 12\n\n# Then we print the size\nprint(quilt_width * quilt_length)\n\n# Whoops! That's a little too large\nquilt_length = 8\n\n# Let's see how large it is now\nprint(quilt_width * quilt_length)",
    "entrypoint": "",
    "inputs": {},
    "time": 6,
    "mode": "line"
  },
  {
    "id": "exponents",
    "title": "Exponents",
    "description": "Learn to use the exponentiation operator",
    "template": "# Calculation of squares for:\n# 6x6 quilt\n\n# 7x7 quilt\n\n# 8x8 quilt\n\n# How many squares for 6 people to have 6 quilts each that are 6x6?\n",
    "solution": "print(6 ** 2)\nprint(7 ** 2)\nprint(8 ** 2)\n\nprint(6 ** 4)\n",
    "entrypoint": "",
    "inputs": {},
    "time": 6,
    "mode": "line"
  },
  {
    "id": "modulo-operator",
    "title": "Modulo Operator",
    "description": "Learn to use the modulo operator",
    "template": "# Calculate the remainder for the first order\nfirst_order_remainder = 269 % 10\n# Print the remainder\nprint(first_order_remainder)\n\n# Determine if the first order gets a coupon\nfirst_order_coupon = \"no\"  # Change this to \"yes\" if applicable\n\n# Calculate the remainder for the second order\nsecond_order_remainder = 270 % 10\n# Print the remainder\nprint(second_order_remainder)\n\n# Determine if the second order gets a coupon\nsecond_order_coupon = \"yes\"  # Change this to \"no\" if applicable\n",
    "solution": "first_order_remainder = 269 % 10\nprint(first_order_remainder)\n\nfirst_order_coupon = \"no\"\n\nsecond_order_remainder = 270 % 10\nprint(second_order_remainder)\n\nsecond_order_coupon = \"yes\"\n",
    "entrypoint": "",
    "inputs": {},
    "time": 11,
    "mode": "line"
  },
  {
    "id": "string-concatenation",
    "title": "String Concatenation",
    "description": "Learn to concatenate strings",
    "template": "string1 = \"The wind, \"\nstring2 = \"which had hitherto carried us along with amazing rapidity, \"\nstring3 = \"sank at sunset to a light breeze; \"\nstring4 = \"the soft air just ruffled the water and \"\nstring5 = \"caused a pleasant motion among the trees as we approached the shore, \"\nstring6 = \"from which it wafted the most delightful scent of flowers and hay.\"\n\n# Define message below:\n\n\n#print(message)\n",
    "solution": "string1 = \"The wind, \"\nstring2 = \"which had hitherto carried us along with amazing rapidity, \"\nstring3 = \"sank at sunset to a light breeze; \"\nstring4 = \"the soft air just ruffled the water and \"\nstring5 = \"caused a pleasant motion among the trees as we approached the shore, \"\nstring6 = \"from which it wafted the most delightful scent of flowers and hay.\"\n\n# Define message below:\nmessage = string1 + string2 + string3 + string4 + string5 + string6\n\n#print(message)\n",
    "entrypoint": "",
    "inputs": {},
    "time": 7,
    "mode": "line"
  },
  {
    "id": "plus-equals",
    "title": "Plus Equals",
    "description": "Use the += operator to update variable values",
    "template": "total_price = 0\n\nnew_sneakers = 50.00\n\ntotal_price += new_sneakers\n\nnice_sweater = 39.00\nfun_books = 20.00\n# Update total_price here:\n\nprint(\"The total price is\", total_price)\n",
    "solution": "total_price = 0\n\nnew_sneakers = 50.00\n\ntotal_price += new_sneakers\n\nnice_sweater = 39.00\nfun_books = 20.00\n# Update total_price here:\n\ntotal_price += nice_sweater\ntotal_price += fun_books\n\nprint(\"The total price is\", total_price)\n",
    "entrypoint": "",
    "inputs": {},
    "time": 5,
    "mode": "line"
  },
  {
    "id": "boolean-expressions",
    "title": "Boolean Expressions",
    "description": "Identify Boolean expressions",
    "template": "first_statement = \"\"\n\n# Define second_statement here\n\n# Define third_statement here\n",
    "solution": "first_statement = \"Yes\"\n\nsecond_statement = \"Yes\"\n\nthird_statement = \"No\"\n",
    "entrypoint": "",
    "inputs": {},
    "time": 5,
    "mode": "line"
  },
  {
    "id": "boolean-variables",
    "title": "Boolean Variables",
    "description": "Introduction to boolean variables and types",
    "template": "# Create a variable and set it to a string\nmy_baby_bool = \"true\"\n\n# Check the type of the variable\nprint(type(my_baby_bool))\n\n# Create another variable and set it to a boolean\nmy_baby_bool_two = \n\n# Check the type of the new variable\nprint(type(my_baby_bool_two))\n",
    "solution": "my_baby_bool = \"true\"\n\nprint(type(my_baby_bool))\n\nmy_baby_bool_two = True\n\nprint(type(my_baby_bool_two))\n",
    "entrypoint": "",
    "inputs": {},
    "time": 5,
    "mode": "line"
  },
  {
    "id": "if-statement",
    "title": "If Statement",
    "description": "Use if statements to control code execution based on conditions",
    "template": "# Enter a user name here, make sure to make it a string\nuser_name = \"angela_catlady_87\"\n\nif user_name == \"Dave\":\n  print(\"Get off my computer Dave!\")\nif user_name == \"angela_catlady_87\":\n  print(\"I know it is you, Dave! Go away!\")\n",
    "solution": "# Enter a user name here, make sure to make it a string\nuser_name = \"angela_catlady_87\"\n\nif user_name == \"Dave\":\n  print(\"Get off my computer, Dave!\")\n\nif user_name == \"angela_catlady_87\":\n  print(\"I know it is you, Dave! Go away!\")\n",
    "entrypoint": "",
    "inputs": {},
    "time": 7,
    "mode": "line"
  },
  {
    "id": "relational-operators-ii",
    "title": "Relational Operators II",
    "description": "Explore more relational operators for boolean expressions",
    "template": "x = 20\ny = 20\n\n# Write the first if statement here:\nif x == y:\n  print(\"These numbers are the same\")\n\ncredits = 120\n\n# Write the second if statement here:\nif credits >= 120:\n  print(\"You have enough credits to graduate!\")\n",
    "solution": "x = 20\ny = 20\n\n# Write the first if statement here:\n\nif x == y:\n  print(\"These numbers are the same\")\n\ncredits = 120\n\n# Write the second if statement here:\n\nif credits >= 120:\n  print(\"You have enough credits to graduate!\")\n",
    "entrypoint": "",
    "inputs": {},
    "time": 5,
    "mode": "line"
  },
  {
    "id": "boolean-operators-and",
    "title": "Boolean Operators: and",
    "description": "Use the 'and' operator to combine boolean expressions",
    "template": "statement_one = \n\nstatement_two = \n\ncredits = 120\ngpa = 3.4\n\nif credits >= 120:\n  print(\"You meet the requirements to graduate!\")\n",
    "solution": "statement_one = False\n\nstatement_two = True\n\ncredits = 120\ngpa = 3.4\n\nif gpa >= 2.0 and credits >= 120:\n  print(\"You meet the requirements to graduate!\")\n",
    "entrypoint": "",
    "inputs": {},
    "time": 6,
    "mode": "line"
  },
  {
    "id": "boolean-operators-or",
    "title": "Boolean Operators: or",
    "description": "Use the 'or' operator for boolean expressions",
    "template": "statement_one = \n\nstatement_two = \n\ncredits = 118\ngpa = 2.0\n\n# Check the graduation requirements here\n\n",
    "solution": "statement_one = True\n\nstatement_two = True\n\ncredits = 118\ngpa = 2.0\n\nif credits >= 120 or gpa >= 2.0:\n  print(\"You have met at least one of the requirements.\")\n",
    "entrypoint": "",
    "time": 5,
    "mode": "line"
  },
  {
    "id": "boolean-operators-not",
    "title": "Boolean Operators: not",
    "description": "Reverse boolean values using the not operator",
    "template": "statement_one = \n\nstatement_two = \n\ncredits = 120\ngpa = 1.8\n",
    "solution": "statement_one = False\n\nstatement_two = True\n\ncredits = 120\ngpa = 1.8\n\nif not credits >= 120:\n  print(\"You do not have enough credits to graduate.\")\n\nif not gpa >= 2.0:\n  print(\"Your GPA is not high enough to graduate.\")\n\nif not (credits >= 120) and not (gpa >= 2.0):\n  print(\"You do not meet either requirement to graduate!\")\n",
    "entrypoint": "",
    "inputs": {},
    "time": 10,
    "mode": "line"
  },
  {
    "id": "else-statements",
    "title": "Else Statements",
    "description": "Use else statements for additional control flow",
    "template": "credits = 120\ngpa = 1.9\n\nif (credits >= 120) and (gpa >= 2.0):\n  print(\"You meet the requirements to graduate!\")\n",
    "solution": "credits = 120\ngpa = 1.9\n\nif (credits >= 120) and (gpa >= 2.0):\n  print(\"You meet the requirements to graduate!\")\nelse:\n  print(\"You do not meet the requirements to graduate.\")\n",
    "entrypoint": "",
    "inputs": {},
    "time": 4,
    "mode": "line"
  },
  {
    "id": "else-if-statements",
    "title": "Else If Statements",
    "description": "Use elif to handle multiple conditions",
    "template": "grade = 86\n\n# Write your if/elif/else statement below:\n",
    "solution": "grade = 86\n\nif grade >= 90:\n  print(\"A\")\nelif grade >= 80:\n  print(\"B\")\nelif grade >= 70:\n  print(\"C\")\nelif grade >= 60:\n  print(\"D\")\nelse:\n  print(\"F\")\n",
    "entrypoint": "",
    "inputs": {},
    "time": 6,
    "mode": "line"
  },
  {
    "id": "logical-operator-review",
    "title": "Logical Operator Review",
    "description": "Review and apply logical operators to solve problems",
    "template": "print(\"I have information for the following planets:\n\")\n\nprint(\"   1. Venus   2. Mars    3. Jupiter\")\nprint(\"   4. Saturn  5. Uranus  6. Neptune\n\")\n \nweight = 185\nplanet = 3\n\n# Write an if statement below:\n",
    "solution": "print(\"I have information for the following planets:\n\")\n\nprint(\"   1. Venus   2. Mars    3. Jupiter\")\nprint(\"   4. Saturn  5. Uranus  6. Neptune\n\")\n \nweight = 185\nplanet = 3\n\nif planet == 1:\n  weight = weight * 0.91\nelif planet == 2:\n  weight = weight * 0.38\nelif planet == 3:\n  weight = weight * 2.34\nelif planet == 4:\n  weight = weight * 1.06\nelif planet == 5:\n  weight = weight * 0.92\nelif planet == 6:\n  weight = weight * 1.19\n\nprint(\"Your weight:\", weight)\n",
    "entrypoint": "",
    "inputs": {},
    "time": 8,
    "mode": "line"
  },
  {
    "id": "what-is-a-list",
    "title": "What is a List?",
    "description": "Introduction to lists and modifying them",
    "template": "heights = [61, 70, 67, 64]\n\n#broken_heights = [65 71 59 62]\n",
    "solution": "heights = [61, 70, 67, 64, 65]\n\nbroken_heights = [65, 71, 59, 62]\n",
    "entrypoint": "",
    "inputs": {},
    "time": 4,
    "mode": "line"
  },
  {
    "id": "list-contents",
    "title": "List Contents",
    "description": "Explore what data types a list can contain",
    "template": "ints_and_strings = [1, 2, 3, \"four\", \"five\"]\n",
    "solution": "ints_and_strings = [1, 2, 3, \"four\", \"five\", \"Six\"]\n\nsam_height_and_testscore = [\"Sam\", 67, 85.5, True]\n",
    "entrypoint": "",
    "inputs": {},
    "time": 3,
    "mode": "line"
  },
  {
    "id": "empty-lists",
    "title": "Empty Lists",
    "description": "Create an empty list",
    "template": "# Create your empty list below\n",
    "solution": "my_empty_list = []\n",
    "entrypoint": "",
    "time": 1,
    "mode": "line"
  },
  {
    "id": "list-methods",
    "title": "List Methods",
    "description": "Explore common list methods in Python",
    "template": "example_list = [1, 2, 3, 4]\n\n#Using Append\nexample_list.append(5)\n# print(example_list)\n\n#Using Remove\nexample_list.remove(5)\n# print(example_list)\n",
    "solution": "example_list = [1, 2, 3, 4]\n\n#Using Append\nexample_list.append(5)\nprint(example_list)\n\n#Using Remove\nelement_to_remove = 5\nif element_to_remove in example_list:\n    example_list.remove(element_to_remove)\nprint(example_list)\n",
    "entrypoint": "",
    "time": 3,
    "mode": "line"
  },
  {
    "id": "growing-a-list-append",
    "title": "Append to List",
    "description": "Add elements to a list using append()",
    "template": "orders = [\"daisies\", \"periwinkle\"]\n\n# Use print to inspect the orders\n\n# Add new order \"tulips\"\n\n# Add another order \"roses\"\n\n# Print the updated orders\n",
    "solution": "orders = [\"daisies\", \"periwinkle\"]\nprint(orders)\n\norders.append(\"tulips\")\norders.append(\"roses\")\n\nprint(orders)\n",
    "entrypoint": "",
    "inputs": {},
    "time": 3,
    "mode": "line"
  },
  {
    "id": "growing-a-list-plus",
    "title": "Growing a List",
    "description": "Use + to concatenate lists",
    "template": "orders = [\"daisy\", \"buttercup\", \"snapdragon\", \"gardenia\", \"lily\"]\n\n# Create new orders here:\n\n\n#broken_prices = [5, 3, 4, 5, 4] + 4",
    "solution": "orders = [\"daisy\", \"buttercup\", \"snapdragon\", \"gardenia\", \"lily\"]\n\n# Create new orders here:\nnew_orders = [\"lilac\", \"iris\"]\n\norders_combined = orders + new_orders\n\nbroken_prices = [5, 3, 4, 5, 4] + [4]",
    "entrypoint": "",
    "inputs": {},
    "time": 6,
    "mode": "line"
  }
]