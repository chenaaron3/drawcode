{
    "patterns": [
        {
            "id": "arrays-hashing",
            "name": "Arrays & Hashing",
            "description": "Fundamental pattern focusing on array manipulation, iteration, and hash table usage for O(1) lookups and frequency counting.",
            "problemIds": [
                "two-sum",
                "best-time-to-buy-and-sell-stock",
                "contains-duplicate",
                "product-of-array-except-self",
                "maximum-subarray",
                "group-anagrams",
                "valid-anagram",
                "longest-consecutive-sequence"
            ],
            "dependencies": [],
            "difficulty": "beginner",
            "estimatedHours": 8
        },
        {
            "id": "intervals",
            "name": "Intervals",
            "description": "Pattern for working with interval ranges, merging overlapping intervals, and scheduling problems.",
            "problemIds": [
                "insert-interval",
                "merge-intervals",
                "non-overlapping-intervals",
                "meeting-rooms"
            ],
            "dependencies": [
                "heap-priority-queue"
            ],
            "difficulty": "intermediate",
            "estimatedHours": 6
        },
        {
            "id": "two-pointers",
            "name": "Two Pointers",
            "description": "Technique using two pointers to traverse arrays or strings from different positions, often used for sorted arrays or palindrome problems.",
            "problemIds": [
                "3sum",
                "container-with-most-water",
                "trapping-rain-water",
                "valid-palindrome",
                "two-sum-ii-input-array-is-sorted"
            ],
            "dependencies": [
                "arrays-hashing"
            ],
            "difficulty": "beginner",
            "estimatedHours": 6
        },
        {
            "id": "sliding-window",
            "name": "Sliding Window",
            "description": "Pattern for problems involving subarrays or substrings, using a window that slides across the data structure to find optimal solutions.",
            "problemIds": [
                "longest-substring-without-repeating-characters",
                "minimum-window-substring",
                "longest-repeating-character-replacement",
                "permutation-in-string",
                "sliding-window-maximum"
            ],
            "dependencies": [
                "two-pointers"
            ],
            "difficulty": "intermediate",
            "estimatedHours": 8
        },
        {
            "id": "binary-search",
            "name": "Binary Search",
            "description": "Divide and conquer approach for searching in sorted arrays or finding optimal solutions in a search space.",
            "problemIds": [
                "binary-search",
                "search-insert-position",
                "search-in-rotated-sorted-array",
                "find-minimum-in-rotated-sorted-array",
                "median-of-two-sorted-arrays"
            ],
            "dependencies": [
                "two-pointers"
            ],
            "difficulty": "intermediate",
            "estimatedHours": 8
        },
        {
            "id": "stack",
            "name": "Stack",
            "description": "LIFO data structure pattern for problems involving nested structures, parsing, or maintaining order of operations.",
            "problemIds": [
                "valid-parentheses",
                "daily-temperatures",
                "car-fleet",
                "largest-rectangle-in-histogram"
            ],
            "dependencies": [
                "arrays-hashing"
            ],
            "difficulty": "beginner",
            "estimatedHours": 6
        },
        {
            "id": "linked-list",
            "name": "Linked List",
            "description": "Pattern for manipulating linked data structures, including traversal, reversal, and cycle detection techniques.",
            "problemIds": [
                "reverse-linked-list",
                "linked-list-cycle",
                "merge-two-sorted-lists",
                "remove-nth-node-from-end-of-list",
                "reorder-list"
            ],
            "dependencies": [
                "stack"
            ],
            "difficulty": "beginner",
            "estimatedHours": 6
        },
        {
            "id": "trees",
            "name": "Trees",
            "description": "Hierarchical data structure pattern covering binary trees, BSTs, and tree traversal algorithms (DFS, BFS).",
            "problemIds": [
                "invert-binary-tree",
                "validate-binary-search-tree",
                "binary-tree-level-order-traversal",
                "maximum-depth-binary-tree",
                "same-tree",
                "subtree-of-another-tree",
                "construct-binary-tree-from-preorder-and-inorder-traversal",
                "binary-tree-right-side-view",
                "lowest-common-ancestor-of-binary-tree",
                "kth-smallest-element-in-bst",
                "binary-tree-zigzag-level-order-traversal"
            ],
            "dependencies": [
                "binary-search",
                "sliding-window",
                "linked-list"
            ],
            "difficulty": "intermediate",
            "estimatedHours": 12
        },
        {
            "id": "tree-dfs-bfs",
            "name": "Tree DFS & BFS",
            "description": "Advanced tree and graph traversal patterns using depth-first search and breadth-first search algorithms.",
            "problemIds": [
                "number-of-islands",
                "alien-dictionary",
                "pacific-atlantic-water-flow"
            ],
            "dependencies": [
                "trees"
            ],
            "difficulty": "intermediate",
            "estimatedHours": 6
        },
        {
            "id": "tries",
            "name": "Tries",
            "description": "Prefix tree data structure pattern for efficient string searching and prefix matching problems.",
            "problemIds": [
                "word-search-ii"
            ],
            "dependencies": [
                "trees"
            ],
            "difficulty": "intermediate",
            "estimatedHours": 6
        },
        {
            "id": "heap-priority-queue",
            "name": "Heap / Priority Queue",
            "description": "Pattern using heap data structure for efficiently finding minimum/maximum elements and solving top-k problems.",
            "problemIds": [
                "top-k-frequent-elements",
                "meeting-rooms-ii"
            ],
            "dependencies": [
                "trees"
            ],
            "difficulty": "intermediate",
            "estimatedHours": 8
        },
        {
            "id": "backtracking",
            "name": "Backtracking",
            "description": "Recursive pattern for exploring all possible solutions by building candidates incrementally and abandoning invalid paths.",
            "problemIds": [
                "combination-sum",
                "subsets",
                "word-search",
                "palindrome-partitioning",
                "letter-combinations-of-phone-number"
            ],
            "dependencies": [
                "trees"
            ],
            "difficulty": "advanced",
            "estimatedHours": 10
        },
        {
            "id": "graphs",
            "name": "Graphs",
            "description": "Pattern for solving problems involving graph data structures, including traversal, connectivity, and cycle detection.",
            "problemIds": [
                "clone-graph",
                "course-schedule",
                "graph-valid-tree",
                "number-of-connected-components-undirected-graph"
            ],
            "dependencies": [
                "backtracking"
            ],
            "difficulty": "advanced",
            "estimatedHours": 10
        },
        {
            "id": "dynamic-programming-1d",
            "name": "Dynamic Programming - 1D",
            "description": "Pattern for optimization problems using dynamic programming with one-dimensional state spaces.",
            "problemIds": [
                "climbing-stairs",
                "coin-change",
                "house-robber",
                "house-robber-ii",
                "longest-increasing-subsequence",
                "jump-game",
                "maximum-product-subarray"
            ],
            "dependencies": [
                "backtracking"
            ],
            "difficulty": "advanced",
            "estimatedHours": 12
        },
        {
            "id": "dynamic-programming-2d",
            "name": "Dynamic Programming - 2D",
            "description": "Advanced dynamic programming pattern using two-dimensional state spaces for complex optimization problems.",
            "problemIds": [
                "longest-common-subsequence",
                "word-break",
                "palindrome-partitioning",
                "decode-ways",
                "unique-paths"
            ],
            "dependencies": [
                "graphs",
                "dynamic-programming-1d"
            ],
            "difficulty": "advanced",
            "estimatedHours": 12
        },
        {
            "id": "bit-manipulation",
            "name": "Bit Manipulation",
            "description": "Pattern using bitwise operations for efficient computation and solving problems involving binary representations.",
            "problemIds": [
                "sum-of-two-integers",
                "number-of-1-bits",
                "counting-bits",
                "missing-number",
                "reverse-bits"
            ],
            "dependencies": [
                "dynamic-programming-1d"
            ],
            "difficulty": "advanced",
            "estimatedHours": 6
        }
    ]
}